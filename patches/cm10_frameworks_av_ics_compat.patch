diff -Naur av/include/media/AudioSystem.h av_b/include/media/AudioSystem.h
--- ../../../../frameworks/av/include/media/AudioSystem.h	2012-09-15 23:48:17.000000000 +0400
+++ ../../../../frameworks/av_b/include/media/AudioSystem.h	2012-08-25 13:51:00.000000000 +0400
@@ -27,6 +27,13 @@
 /* XXX: Should be include by all the users instead */
 #include <media/AudioParameter.h>
 
+// ## Compatibility enum to be able to use ICS propietary libs with JB - As soon as JB
+//  propietary libs are released, this declaration can go away...
+extern "C" {
+typedef enum { a1, b1 } audio_policy_output_flags_t;
+};
+// ##
+
 namespace android {
 
 typedef void (*audio_error_callback)(status_t err);
@@ -114,9 +121,6 @@
         size_t* buffSize);
 
     static status_t setVoiceVolume(float volume);
-#if defined(QCOM_HARDWARE) && defined(QCOM_FM_ENABLED)
-    static status_t setFmVolume(float volume);
-#endif
 
     // return the number of audio frames written by AudioFlinger to audio HAL and
     // audio dsp to DAC since the output on which the specified stream is playing
@@ -144,9 +148,6 @@
         INPUT_CLOSED,
         INPUT_CONFIG_CHANGED,
         STREAM_CONFIG_CHANGED,
-#ifdef QCOM_HARDWARE
-        A2DP_OUTPUT_STATE,
-#endif
         NUM_CONFIG_EVENTS
     };
 
@@ -196,6 +197,16 @@
                                         audio_format_t format = AUDIO_FORMAT_DEFAULT,
                                         uint32_t channels = AUDIO_CHANNEL_OUT_STEREO,
                                         audio_output_flags_t flags = AUDIO_OUTPUT_FLAG_NONE);
+	
+	// ## Compatibility fn to be able to use ICS propietary libs with JB - As soon as JB
+	//  propietary libs are released, this fn can go away...
+	static audio_io_handle_t getOutput(audio_stream_type_t stream, 
+										uint32_t samplingRate, 
+										uint32_t format, 
+										uint32_t channels, 
+										audio_policy_output_flags_t flags);
+	// ##
+										
     static status_t startOutput(audio_io_handle_t output,
                                 audio_stream_type_t stream,
                                 int session = 0);
diff -Naur av/include/media/AudioTrack.h av_b/include/media/AudioTrack.h
--- ../../../../frameworks/av/include/media/AudioTrack.h	2012-09-15 23:48:17.000000000 +0400
+++ ../../../../frameworks/av_b/include/media/AudioTrack.h	2012-08-29 21:39:00.000000000 +0400
@@ -31,9 +31,6 @@
 #include <cutils/sched_policy.h>
 #include <utils/threads.h>
 
-#ifdef QCOM_HARDWARE
-#include <media/IDirectTrackClient.h>
-#endif
 namespace android {
 
 // ----------------------------------------------------------------------------
@@ -42,11 +39,7 @@
 
 // ----------------------------------------------------------------------------
 
-class AudioTrack :
-#ifdef QCOM_HARDWARE
-                   public BnDirectTrackClient,
-#endif
-                   virtual public RefBase
+class AudioTrack : virtual public RefBase
 {
 public:
     enum channel_index {
@@ -199,7 +192,7 @@
                                     callback_t cbf      = NULL,
                                     void* user          = NULL,
                                     int notificationFrames = 0,
-                                    int sessionId = 0);
+                                    int sessionId       = 0);
 
     /* Terminates the AudioTrack and unregisters it from AudioFlinger.
      * Also destroys all resources associated with the AudioTrack.
@@ -227,6 +220,7 @@
                             bool threadCanCallJava = false,
                             int sessionId       = 0);
 
+
     /* Result of constructing the AudioTrack. This must be checked
      * before using any AudioTrack API (except for set()), because using
      * an uninitialized AudioTrack produces undefined results.
@@ -400,6 +394,11 @@
      */
             int    getSessionId() const;
 
+// ## Compatibility enum to be able to use ICS propietary libs with JB - As soon as JB
+//  propietary libs are released, this declaration can go away... 			
+            int    getSessionId();
+// ##			
+			
     /* Attach track auxiliary output to specified effect. Use effectId = 0
      * to detach track from effect.
      *
@@ -457,11 +456,6 @@
      */
             status_t dump(int fd, const Vector<String16>& args) const;
 
-#ifdef QCOM_HARDWARE
-            virtual void notify(int msg);
-            virtual status_t getTimeStamp(uint64_t *tstamp);
-#endif
-
 protected:
     /* copying audio tracks is not allowed */
                         AudioTrack(const AudioTrack& other);
@@ -509,9 +503,6 @@
             status_t restoreTrack_l(audio_track_cblk_t*& cblk, bool fromStart);
             bool stopped_l() const { return !mActive; }
 
-#ifdef QCOM_HARDWARE
-    sp<IDirectTrack>        mDirectTrack;
-#endif
     sp<IAudioTrack>         mAudioTrack;
     sp<IMemory>             mCblkMemory;
     sp<AudioTrackThread>    mAudioTrackThread;
@@ -545,17 +536,10 @@
     uint32_t                mUpdatePeriod;
     bool                    mFlushed; // FIXME will be made obsolete by making flush() synchronous
     audio_output_flags_t    mFlags;
-#ifdef QCOM_HARDWARE
-    sp<IAudioFlinger>       mAudioFlinger;
-    audio_io_handle_t       mAudioDirectOutput;
-#endif
     int                     mSessionId;
     int                     mAuxEffectId;
     mutable Mutex           mLock;
     status_t                mRestoreStatus;
-#ifdef QCOM_HARDWARE
-    void*                   mObserver;
-#endif
     bool                    mIsTimed;
     int                     mPreviousPriority;          // before start()
     SchedPolicy             mPreviousSchedulingGroup;
diff -Naur av/media/libmedia/AudioSystem.cpp av_b/media/libmedia/AudioSystem.cpp
--- ../../../../frameworks/av/media/libmedia/AudioSystem.cpp	2012-09-15 23:48:17.000000000 +0400
+++ ../../../../frameworks/av_b/media/libmedia/AudioSystem.cpp	2012-08-25 13:50:00.000000000 +0400
@@ -411,15 +411,6 @@
     }
 }
 
-#if defined(QCOM_HARDWARE) && defined(QCOM_FM_ENABLED)
-status_t AudioSystem::setFmVolume(float value)
-{
-    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
-    if (af == 0) return PERMISSION_DENIED;
-    return af->setFmVolume(value);
-}
-#endif
-
 // ---------------------------------------------------------------------------
 
 void AudioSystem::AudioFlingerClient::binderDied(const wp<IBinder>& who) {
@@ -605,13 +596,17 @@
     return aps->getOutput(stream, samplingRate, format, channels, flags);
 }
 
-extern "C" audio_io_handle_t _ZN7android11AudioSystem9getOutputE19audio_stream_type_tjjj27audio_policy_output_flags_t(audio_stream_type_t stream,
-                                    uint32_t samplingRate,
-                                    uint32_t format,
-                                    uint32_t channels,
-                                    audio_output_flags_t flags) {
-    return AudioSystem::getOutput(stream,samplingRate,(audio_format_t) format, channels, flags);
-}
+// ## Compatibility fn to be able to use ICS propietary libs with JB - As soon as JB
+//    propietary libs are released, this fn can go away...
+audio_io_handle_t AudioSystem::getOutput(audio_stream_type_t stream, 
+										uint32_t samplingRate, 
+										uint32_t format, 
+										uint32_t channels, 
+										audio_policy_output_flags_t flags)
+{
+	return getOutput(stream,samplingRate,(audio_format_t)format,channels,(audio_output_flags_t)flags);
+}									
+// ##
 
 status_t AudioSystem::startOutput(audio_io_handle_t output,
                                   audio_stream_type_t stream,
@@ -770,84 +765,4 @@
     ALOGW("AudioPolicyService server died!");
 }
 
-#ifdef USE_SAMSUNG_SEPARATEDSTREAM
-extern "C" bool _ZN7android11AudioSystem17isSeparatedStreamE19audio_stream_type_t(audio_stream_type_t stream)
-{
-    ALOGD("android::AudioSystem::isSeparatedStream(audio_stream_type_t) called!");
-    ALOGD("audio_stream_type_t: %d", stream);
-
-/* this is the correct implementation, but breaks headset volume rocker.
-    if (stream == 3  || stream == 9  || stream == 10
-     || stream == 12 || stream == 13 || stream == 14)
-    {
-        LOGD("isSeparatedStream: true");
-        return true;
-    }
-*/
-
-    ALOGD("isSeparatedStream: false");
-    return false;
-}
-#endif // USE_SAMSUNG_SEPARATEDSTREAM
-
-#ifdef USES_AUDIO_LEGACY
-extern "C" uint32_t _ZN7android11AudioSystem8popCountEj(uint32_t u)
-{
-    return popcount(u);
-}
-
-extern "C" bool _ZN7android11AudioSystem12isA2dpDeviceENS0_13audio_devicesE(uint32_t device)
-{
-    return audio_is_a2dp_device((audio_devices_t)device);
-}
-
-extern "C" bool _ZN7android11AudioSystem13isInputDeviceENS0_13audio_devicesE(uint32_t device)
-{
-    return audio_is_input_device((audio_devices_t)device);
-}
-
-extern "C" bool _ZN7android11AudioSystem14isOutputDeviceENS0_13audio_devicesE(uint32_t device)
-{
-    return audio_is_output_device((audio_devices_t)device);
-}
-
-extern "C" bool _ZN7android11AudioSystem20isBluetoothScoDeviceENS0_13audio_devicesE(uint32_t device)
-{
-    return audio_is_bluetooth_sco_device((audio_devices_t)device);
-}
-
-extern "C" status_t _ZN7android11AudioSystem24setDeviceConnectionStateENS0_13audio_devicesENS0_23device_connection_stateEPKc(audio_devices_t device,
-                                               audio_policy_dev_state_t state,
-                                               const char *device_address) 
-{
-    return AudioSystem::setDeviceConnectionState(device, state, device_address);
-}
-
-extern "C" audio_io_handle_t _ZN7android11AudioSystem9getOutputENS0_11stream_typeEjjjNS0_12output_flagsE(audio_stream_type_t stream,
-                                    uint32_t samplingRate,
-                                    uint32_t format,
-                                    uint32_t channels,
-                                    audio_output_flags_t flags) 
-{
-   return AudioSystem::getOutput(stream,samplingRate,(audio_format_t)format,channels>>2,flags);
-}
-
-extern "C" bool _ZN7android11AudioSystem11isLinearPCMEj(uint32_t format)
-{
-    return audio_is_linear_pcm((audio_format_t)format);
-}
-
-extern "C" bool _ZN7android11AudioSystem15isLowVisibilityENS0_11stream_typeE(audio_stream_type_t stream)
-{
-    if (stream == AUDIO_STREAM_SYSTEM ||
-        stream == AUDIO_STREAM_NOTIFICATION ||
-        stream == AUDIO_STREAM_RING) {
-        return true;
-    } else {
-        return false;
-    }
-}
-
-#endif // AUDIO_LEGACY
-
 }; // namespace android
diff -Naur av/media/libmedia/AudioTrack.cpp av_b/media/libmedia/AudioTrack.cpp
--- ../../../../frameworks/av/media/libmedia/AudioTrack.cpp	2012-09-15 23:48:17.000000000 +0400
+++ ../../../../frameworks/av_b/media/libmedia/AudioTrack.cpp	2012-08-29 21:39:00.000000000 +0400
@@ -1,7 +1,6 @@
 /*
 **
 ** Copyright 2007, The Android Open Source Project
-** Copyright (c) 2012, Code Aurora Forum. All rights reserved.
 **
 ** Licensed under the Apache License, Version 2.0 (the "License");
 ** you may not use this file except in compliance with the License.
@@ -19,6 +18,7 @@
 
 //#define LOG_NDEBUG 0
 #define LOG_TAG "AudioTrack"
+
 #include <stdint.h>
 #include <sys/types.h>
 #include <limits.h>
@@ -86,47 +86,11 @@
 
 // ---------------------------------------------------------------------------
 
-#ifdef USE_KINETO_COMPATIBILITY
-// Really dirty hack to give a Froyo-compatible constructor
-extern "C" AudioTrack *_ZN7android10AudioTrackC1EijiiijPFviPvS1_ES1_ii(
-        AudioTrack *This,
-        int streamType,
-        uint32_t sampleRate,
-        int format,
-        int channels,
-        int frameCount,
-        uint32_t flags,
-        AudioTrack::callback_t cbf,
-        void* user,
-        int notificationFrames,
-        int sessionId);
-extern "C" AudioTrack *_ZN7android10AudioTrackC1EijiiijPFviPvS1_ES1_i(
-        AudioTrack *This,
-        int streamType,
-        uint32_t sampleRate,
-        int format,
-        int channels,
-        int frameCount,
-        uint32_t flags,
-        AudioTrack::callback_t cbf,
-        void* user,
-        int notificationFrames)
-{
-    return _ZN7android10AudioTrackC1EijiiijPFviPvS1_ES1_ii(This,
-        streamType, sampleRate, format, channels,
-        frameCount, flags, cbf, user, notificationFrames, 0);
-}
-#endif
-
 AudioTrack::AudioTrack()
     : mStatus(NO_INIT),
       mIsTimed(false),
       mPreviousPriority(ANDROID_PRIORITY_NORMAL),
       mPreviousSchedulingGroup(SP_DEFAULT)
-#ifdef QCOM_HARDWARE
-      ,mAudioFlinger(NULL),
-      mObserver(NULL)
-#endif
 {
 }
 
@@ -145,10 +109,6 @@
       mIsTimed(false),
       mPreviousPriority(ANDROID_PRIORITY_NORMAL),
       mPreviousSchedulingGroup(SP_DEFAULT)
-#ifdef QCOM_HARDWARE
-      ,mAudioFlinger(NULL),
-      mObserver(NULL)
-#endif
 {
     mStatus = set(streamType, sampleRate, format, channelMask,
             frameCount, flags, cbf, user, notificationFrames,
@@ -170,10 +130,6 @@
     : mStatus(NO_INIT),
       mIsTimed(false),
       mPreviousPriority(ANDROID_PRIORITY_NORMAL), mPreviousSchedulingGroup(SP_DEFAULT)
-#ifdef QCOM_HARDWARE
-      ,mAudioFlinger(NULL),
-      mObserver(NULL)
-#endif
 {
     mStatus = set((audio_stream_type_t)streamType, sampleRate, (audio_format_t)format, channelMask,
             frameCount, (audio_output_flags_t)flags, cbf, user, notificationFrames,
@@ -195,10 +151,6 @@
       mIsTimed(false),
       mPreviousPriority(ANDROID_PRIORITY_NORMAL),
       mPreviousSchedulingGroup(SP_DEFAULT)
-#ifdef QCOM_HARDWARE
-      ,mAudioFlinger(NULL),
-      mObserver(NULL)
-#endif
 {
     mStatus = set(streamType, sampleRate, format, channelMask,
             0 /*frameCount*/, flags, cbf, user, notificationFrames,
@@ -214,27 +166,14 @@
         // it is looping on buffer full condition in obtainBuffer().
         // Otherwise the callback thread will never exit.
         stop();
-
         if (mAudioTrackThread != 0) {
             mAudioTrackThread->requestExit();   // see comment in AudioTrack.h
             mAudioTrackThread->requestExitAndWait();
             mAudioTrackThread.clear();
         }
-#ifdef QCOM_HARDWARE
-        if (mAudioTrack != 0) {
-            mAudioTrack.clear();
-            AudioSystem::releaseAudioSessionId(mSessionId);
-        }
-
-        if (mDirectTrack != 0) {
-            mDirectTrack.clear();
-        }
-        IPCThreadState::self()->flushCommands();
-#else
         mAudioTrack.clear();
         IPCThreadState::self()->flushCommands();
         AudioSystem::releaseAudioSessionId(mSessionId);
-#endif
     }
 }
 
@@ -307,25 +246,12 @@
         flags = (audio_output_flags_t)(flags &~AUDIO_OUTPUT_FLAG_DEEP_BUFFER);
     }
 
-#ifdef QCOM_HARDWARE
-    if ((streamType == AUDIO_STREAM_VOICE_CALL)
-         && (channelMask == AUDIO_CHANNEL_OUT_MONO)
-         && ((sampleRate == 8000 || sampleRate == 16000)))
-    {
-        ALOGD("Turn on Direct Output for VOIP RX");
-        flags = (audio_output_flags_t)(flags | AUDIO_OUTPUT_FLAG_VOIP_RX|AUDIO_OUTPUT_FLAG_DIRECT);
-    }
-#endif
-
     if (!audio_is_output_channel(channelMask)) {
         ALOGE("Invalid channel mask");
         return BAD_VALUE;
     }
     uint32_t channelCount = popcount(channelMask);
 
-#ifdef QCOM_HARDWARE
-    ALOGV("AudioTrack getOutput streamType %d, sampleRate %d, format %d, channelMask %d, flags %x", streamType, sampleRate, format, channelMask, flags);
-#endif
     audio_io_handle_t output = AudioSystem::getOutput(
                                     streamType,
                                     sampleRate, format, channelMask,
@@ -346,82 +272,46 @@
     mFlags = flags;
     mCbf = cbf;
 
-#ifdef QCOM_HARDWARE
-    if (flags & AUDIO_OUTPUT_FLAG_LPA || flags & AUDIO_OUTPUT_FLAG_TUNNEL) {
-        ALOGV("Creating Direct Track");
-        const sp<IAudioFlinger>& audioFlinger = AudioSystem::get_audio_flinger();
-        if (audioFlinger == 0) {
-            ALOGE("Could not get audioflinger");
-            return NO_INIT;
-        }
-        mAudioFlinger = audioFlinger;
-        status_t status;
-        mAudioDirectOutput = output;
-        mDirectTrack = audioFlinger->createDirectTrack( getpid(),
-                                                        sampleRate,
-                                                        channelMask,
-                                                        mAudioDirectOutput,
-                                                        &mSessionId,
-                                                        this,
-                                                        streamType,
-                                                        &status);
-        if(status != NO_ERROR) {
-            ALOGE("createDirectTrack returned with status %d", status);
-        }
-        mAudioTrack = NULL;
-        mSharedBuffer = NULL;
-    }
-    else {
-#endif
-        if (cbf != NULL) {
-            mAudioTrackThread = new AudioTrackThread(*this, threadCanCallJava);
-            mAudioTrackThread->run("AudioTrack", ANDROID_PRIORITY_AUDIO, 0 /*stack*/);
-        }
-        // create the IAudioTrack
-        status_t status = createTrack_l(streamType,
-                                      sampleRate,
-                                      format,
-                                      (uint32_t)channelMask,
-                                      frameCount,
-                                      flags,
-                                      sharedBuffer,
-                                      output);
+    if (cbf != NULL) {
+        mAudioTrackThread = new AudioTrackThread(*this, threadCanCallJava);
+        mAudioTrackThread->run("AudioTrack", ANDROID_PRIORITY_AUDIO, 0 /*stack*/);
+    }
+
+    // create the IAudioTrack
+    status_t status = createTrack_l(streamType,
+                                  sampleRate,
+                                  format,
+                                  (uint32_t)channelMask,
+                                  frameCount,
+                                  flags,
+                                  sharedBuffer,
+                                  output);
 
-        if (status != NO_ERROR) {
-            if (mAudioTrackThread != 0) {
-                mAudioTrackThread->requestExit();
-                mAudioTrackThread.clear();
-            }
-            return status;
+    if (status != NO_ERROR) {
+        if (mAudioTrackThread != 0) {
+            mAudioTrackThread->requestExit();
+            mAudioTrackThread.clear();
         }
-#ifdef QCOM_HARDWARE
-        AudioSystem::acquireAudioSessionId(mSessionId);
-        mAudioDirectOutput = -1;
-        mDirectTrack = NULL;
-        mSharedBuffer = sharedBuffer;
+        return status;
     }
-    mUserData = user;
-#endif
+
     mStatus = NO_ERROR;
+
     mStreamType = streamType;
     mFormat = format;
     mChannelMask = (uint32_t)channelMask;
     mChannelCount = channelCount;
-
+    mSharedBuffer = sharedBuffer;
     mMuted = false;
     mActive = false;
-
+    mUserData = user;
     mLoopCount = 0;
     mMarkerPosition = 0;
     mMarkerReached = false;
     mNewPosition = 0;
     mUpdatePeriod = 0;
     mFlushed = false;
-#ifndef QCOM_HARDWARE
-    mSharedBuffer = sharedBuffer;
-    mUserData = user;
     AudioSystem::acquireAudioSessionId(mSessionId);
-#endif
     mRestoreStatus = NO_ERROR;
     return NO_ERROR;
 }
@@ -435,11 +325,6 @@
 
 uint32_t AudioTrack::latency() const
 {
-#ifdef QCOM_HARDWARE
-    if(mAudioDirectOutput != -1) {
-        return mAudioFlinger->latency(mAudioDirectOutput);
-    }
-#endif
     return mLatency;
 }
 
@@ -460,33 +345,16 @@
 
 uint32_t AudioTrack::frameCount() const
 {
-#ifdef QCOM_HARDWARE
-    if(mAudioDirectOutput != -1) {
-        return mAudioFlinger->frameCount(mAudioDirectOutput);
-    }
-#endif
     return mCblk->frameCount;
 }
 
 size_t AudioTrack::frameSize() const
 {
-#ifdef QCOM_HARDWARE
-    if ((audio_stream_type_t)mStreamType == AUDIO_STREAM_VOICE_CALL) {
-       if (audio_is_linear_pcm(mFormat)) {
-          return channelCount()*audio_bytes_per_sample(mFormat);
-       } else {
-          return channelCount()*sizeof(int16_t);
-       }
+    if (audio_is_linear_pcm(mFormat)) {
+        return channelCount()*audio_bytes_per_sample(mFormat);
     } else {
-#endif
-        if (audio_is_linear_pcm(mFormat)) {
-            return channelCount()*audio_bytes_per_sample(mFormat);
-        } else {
-            return sizeof(uint8_t);
-        }
-#ifdef QCOM_HARDWARE
+        return sizeof(uint8_t);
     }
-#endif
 }
 
 sp<IMemory>& AudioTrack::sharedBuffer()
@@ -498,15 +366,6 @@
 
 void AudioTrack::start()
 {
-#ifdef QCOM_HARDWARE
-    if (mDirectTrack != NULL) {
-        if(mActive == 0) {
-            mActive = 1;
-            mDirectTrack->start();
-        }
-        return;
-    }
-#endif
     sp<AudioTrackThread> t = mAudioTrackThread;
     status_t status = NO_ERROR;
 
@@ -571,35 +430,26 @@
 
     AutoMutex lock(mLock);
     if (mActive) {
-#ifdef QCOM_HARDWARE
-        if(mDirectTrack != NULL) {
-            mActive = false;
-            mDirectTrack->stop();
-        } else if (mAudioTrack != NULL) {
-#endif
-            mActive = false;
-            mCblk->cv.signal();
-            mAudioTrack->stop();
-            // Cancel loops (If we are in the middle of a loop, playback
-            // would not stop until loopCount reaches 0).
-            setLoop_l(0, 0, 0);
-            // the playback head position will reset to 0, so if a marker is set, we need
-            // to activate it again
-            mMarkerReached = false;
-            // Force flush if a shared buffer is used otherwise audioflinger
-            // will not stop before end of buffer is reached.
-            if (mSharedBuffer != 0) {
-                flush_l();
-            }
-            if (t != 0) {
-                t->pause();
-            } else {
-                setpriority(PRIO_PROCESS, 0, mPreviousPriority);
-                set_sched_policy(0, mPreviousSchedulingGroup);
-            }
-#ifdef QCOM_HARDWARE
+        mActive = false;
+        mCblk->cv.signal();
+        mAudioTrack->stop();
+        // Cancel loops (If we are in the middle of a loop, playback
+        // would not stop until loopCount reaches 0).
+        setLoop_l(0, 0, 0);
+        // the playback head position will reset to 0, so if a marker is set, we need
+        // to activate it again
+        mMarkerReached = false;
+        // Force flush if a shared buffer is used otherwise audioflinger
+        // will not stop before end of buffer is reached.
+        if (mSharedBuffer != 0) {
+            flush_l();
+        }
+        if (t != 0) {
+            t->pause();
+        } else {
+            setpriority(PRIO_PROCESS, 0, mPreviousPriority);
+            set_sched_policy(0, mPreviousSchedulingGroup);
         }
-#endif
     }
 
 }
@@ -613,15 +463,7 @@
 void AudioTrack::flush()
 {
     AutoMutex lock(mLock);
-#ifdef QCOM_HARDWARE
-    if(mDirectTrack != NULL) {
-        mDirectTrack->flush();
-    } else {
-#endif
-        flush_l();
-#ifdef QCOM_HARDWARE
-    }
-#endif
+    flush_l();
 }
 
 // must be called with mLock held
@@ -649,31 +491,14 @@
     AutoMutex lock(mLock);
     if (mActive) {
         mActive = false;
-#ifdef QCOM_HARDWARE
-        if(mDirectTrack != NULL) {
-            ALOGV("mDirectTrack pause");
-            mDirectTrack->pause();
-        } else {
-#endif
-            mCblk->cv.signal();
-            mAudioTrack->pause();
-#ifdef QCOM_HARDWARE
-        }
-#endif
+        mCblk->cv.signal();
+        mAudioTrack->pause();
     }
 }
 
 void AudioTrack::mute(bool e)
 {
-#ifdef QCOM_HARDWARE
-    if(mDirectTrack != NULL) {
-        mDirectTrack->mute(e);
-    } else {
-#endif
-        mAudioTrack->mute(e);
-#ifdef QCOM_HARDWARE
-    }
-#endif
+    mAudioTrack->mute(e);
     mMuted = e;
 }
 
@@ -691,16 +516,8 @@
     AutoMutex lock(mLock);
     mVolume[LEFT] = left;
     mVolume[RIGHT] = right;
-#ifdef QCOM_HARDWARE
-    if(mDirectTrack != NULL) {
-        ALOGV("mDirectTrack->setVolume(left = %f , right = %f)", left,right);
-        mDirectTrack->setVolume(left, right);
-    } else {
-#endif
-        mCblk->setVolumeLR((uint32_t(uint16_t(right * 0x1000)) << 16) | uint16_t(left * 0x1000));
-#ifdef QCOM_HARDWARE
-    }
-#endif
+
+    mCblk->setVolumeLR((uint32_t(uint16_t(right * 0x1000)) << 16) | uint16_t(left * 0x1000));
 
     return NO_ERROR;
 }
@@ -717,11 +534,6 @@
 
 status_t AudioTrack::setAuxEffectSendLevel(float level)
 {
-#ifdef QCOM_HARDWARE
-    if (mDirectTrack != NULL) {
-        return NO_ERROR;
-    }
-#endif
     ALOGV("setAuxEffectSendLevel(%f)", level);
     if (level < 0.0f || level > 1.0f) {
         return BAD_VALUE;
@@ -768,11 +580,6 @@
     }
 
     AutoMutex lock(mLock);
-#ifdef QCOM_HARDWARE
-    if(mAudioDirectOutput != -1) {
-        return mAudioFlinger->sampleRate(mAudioDirectOutput);
-    }
-#endif
     return mCblk->sampleRate;
 }
 
@@ -920,6 +727,14 @@
     return mSessionId;
 }
 
+// ## Compatibility enum to be able to use ICS propietary libs with JB - As soon as JB
+//  propietary libs are released, this declaration can go away... 			
+int AudioTrack::getSessionId()
+{
+    return mSessionId;
+}
+// ##
+
 status_t AudioTrack::attachAuxEffect(int effectId)
 {
     ALOGV("attachAuxEffect(%d)", effectId);
@@ -1258,15 +1073,7 @@
 
 ssize_t AudioTrack::write(const void* buffer, size_t userSize)
 {
-#ifdef QCOM_HARDWARE
-    if (mDirectTrack != NULL) {
-        if (!mActive) {
-            mActive = true;
-        }
-        mDirectTrack->write(buffer,userSize);
-        return userSize;
-    }
-#endif
+
     if (mSharedBuffer != 0) return INVALID_OPERATION;
     if (mIsTimed) return INVALID_OPERATION;
 
@@ -1646,23 +1453,6 @@
     return NO_ERROR;
 }
 
-#ifdef QCOM_HARDWARE
-void AudioTrack::notify(int msg) {
-    if (msg == EVENT_UNDERRUN) {
-        ALOGV("Posting event underrun to Audio Sink.");
-        mCbf(EVENT_UNDERRUN, mUserData, 0);
-    }
-}
-
-status_t AudioTrack::getTimeStamp(uint64_t *tstamp) {
-    if (mDirectTrack != NULL) {
-        *tstamp = mDirectTrack->getTimeStamp();
-        ALOGV("Timestamp %lld ", *tstamp);
-    }
-    return NO_ERROR;
-}
-#endif
-
 // =========================================================================
 
 AudioTrack::AudioTrackThread::AudioTrackThread(AudioTrack& receiver, bool bCanCallJava)
